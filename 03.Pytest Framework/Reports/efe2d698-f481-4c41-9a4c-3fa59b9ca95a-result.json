{"name": "test_bankapp_login_params_002[bankapp_login_data2]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"loginButton\" type=\"submit\" class=\"submitButton\">...</button> is not clickable at point (381, 421). Other element would receive the click: <footer>...</footer>\n  (Session info: chrome=137.0.7151.104)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff67460fe75+79173]\n\tGetHandleVerifier [0x0x7ff67460fed0+79264]\n\t(No symbol) [0x0x7ff6743c9e5a]\n\t(No symbol) [0x0x7ff674428599]\n\t(No symbol) [0x0x7ff674425f32]\n\t(No symbol) [0x0x7ff674422f71]\n\t(No symbol) [0x0x7ff674421e61]\n\t(No symbol) [0x0x7ff674413464]\n\t(No symbol) [0x0x7ff67444896a]\n\t(No symbol) [0x0x7ff674412d16]\n\t(No symbol) [0x0x7ff674448b80]\n\t(No symbol) [0x0x7ff67447100d]\n\t(No symbol) [0x0x7ff674448743]\n\t(No symbol) [0x0x7ff6744114c1]\n\t(No symbol) [0x0x7ff674412253]\n\tGetHandleVerifier [0x0x7ff6748da2ad+3004797]\n\tGetHandleVerifier [0x0x7ff6748d46fd+2981325]\n\tGetHandleVerifier [0x0x7ff6748f3350+3107360]\n\tGetHandleVerifier [0x0x7ff67462a9fe+188622]\n\tGetHandleVerifier [0x0x7ff67463228f+219487]\n\tGetHandleVerifier [0x0x7ff674618dc4+115860]\n\tGetHandleVerifier [0x0x7ff674618f79+116297]\n\tGetHandleVerifier [0x0x7ff6745ff528+11256]\n\tBaseThreadInitThunk [0x0x7ffc565e7374+20]\n\tRtlUserThreadStart [0x0x7ffc569bcc91+33]", "trace": "self = <test_BankApp_Login_Params.Test_BankApp_Login_Params object at 0x0000015B8757FCE0>\ndriver_setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ece42c9908377f0262ab81f412d89014\")>\nbankapp_login_data = ('credence123111', 'Credence@123987211a', 'Fail')\n\n    def test_bankapp_login_params_002(self, driver_setup, bankapp_login_data):\n    \n        username = bankapp_login_data[0]\n        password = bankapp_login_data[1]\n        expected_result = bankapp_login_data[2]\n        print(f\"Username is: {username}\")\n        print(f\"Password is: {password}\")\n        print(f\"Expected Result is: {expected_result}\")\n    \n        driver = driver_setup\n        driver.get(\"https://apps.credence.in/login.html\")\n        driver.maximize_window()\n        # time.sleep(2)\n        print(\"Title of the page:\", driver.title)\n    \n        # Enter Username\n        username_field = driver.find_element(By.ID, \"username\")\n        username_field.send_keys(username)\n    \n        # Enter Password\n        password_field = driver.find_element(By.NAME, \"password\")\n        password_field.send_keys(password)\n    \n        # Click on Create User Button\n    \n        login_button = driver.find_element(By.ID, \"loginButton\")\n>       login_button.click()\n\nTest_Cases\\test_BankApp_Login_Params.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000015B876D2780>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff6745ff528+11256]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffc565e7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffc569bcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"loginButton\" type=\"submit\" class=\"submitButton\">...</button> is not clickable at point (381, 421). Other element would receive the click: <footer>...</footer>\nE         (Session info: chrome=137.0.7151.104)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff67460fe75+79173]\nE       \tGetHandleVerifier [0x0x7ff67460fed0+79264]\nE       \t(No symbol) [0x0x7ff6743c9e5a]\nE       \t(No symbol) [0x0x7ff674428599]\nE       \t(No symbol) [0x0x7ff674425f32]\nE       \t(No symbol) [0x0x7ff674422f71]\nE       \t(No symbol) [0x0x7ff674421e61]\nE       \t(No symbol) [0x0x7ff674413464]\nE       \t(No symbol) [0x0x7ff67444896a]\nE       \t(No symbol) [0x0x7ff674412d16]\nE       \t(No symbol) [0x0x7ff674448b80]\nE       \t(No symbol) [0x0x7ff67447100d]\nE       \t(No symbol) [0x0x7ff674448743]\nE       \t(No symbol) [0x0x7ff6744114c1]\nE       \t(No symbol) [0x0x7ff674412253]\nE       \tGetHandleVerifier [0x0x7ff6748da2ad+3004797]\nE       \tGetHandleVerifier [0x0x7ff6748d46fd+2981325]\nE       \tGetHandleVerifier [0x0x7ff6748f3350+3107360]\nE       \tGetHandleVerifier [0x0x7ff67462a9fe+188622]\nE       \tGetHandleVerifier [0x0x7ff67463228f+219487]\nE       \tGetHandleVerifier [0x0x7ff674618dc4+115860]\nE       \tGetHandleVerifier [0x0x7ff674618f79+116297]\nE       \tGetHandleVerifier [0x0x7ff6745ff528+11256]\nE       \tBaseThreadInitThunk [0x0x7ffc565e7374+20]\nE       \tRtlUserThreadStart [0x0x7ffc569bcc91+33]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "attachments": [{"name": "stdout", "source": "4fc802f1-aa80-4f6d-a23f-ff0cdf44645d-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "bankapp_login_data", "value": "('credence123111', 'Credence@123987211a', 'Fail')"}], "start": 1750107768262, "stop": 1750107777404, "uuid": "084d7f39-6674-4ec2-9597-022df8f1d206", "historyId": "4591a231961ff01de5063dbab99156bf", "testCaseId": "f1904fd691d72bd98e6e204f24e2ef77", "fullName": "Test_Cases.test_BankApp_Login_Params.Test_BankApp_Login_Params#test_bankapp_login_params_002", "labels": [{"name": "parentSuite", "value": "Test_Cases"}, {"name": "suite", "value": "test_BankApp_Login_Params"}, {"name": "subSuite", "value": "Test_BankApp_Login_Params"}, {"name": "host", "value": "Electricion"}, {"name": "thread", "value": "8860-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Cases.test_BankApp_Login_Params"}]}