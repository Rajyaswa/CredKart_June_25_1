{"name": "test_Orange_HRM_Login_001", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\n  (Session info: chrome=137.0.7151.104)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7bf42cda5+78885]\n\tGetHandleVerifier [0x0x7ff7bf42ce00+78976]\n\t(No symbol) [0x0x7ff7bf1e9bca]\n\t(No symbol) [0x0x7ff7bf1e65e2]\n\t(No symbol) [0x0x7ff7bf1d7319]\n\t(No symbol) [0x0x7ff7bf1d90c1]\n\t(No symbol) [0x0x7ff7bf1d7636]\n\t(No symbol) [0x0x7ff7bf1d7096]\n\t(No symbol) [0x0x7ff7bf1d6d5a]\n\t(No symbol) [0x0x7ff7bf1d492f]\n\t(No symbol) [0x0x7ff7bf1d51ac]\n\t(No symbol) [0x0x7ff7bf1edb7a]\n\t(No symbol) [0x0x7ff7bf29201e]\n\t(No symbol) [0x0x7ff7bf268b8a]\n\t(No symbol) [0x0x7ff7bf29122f]\n\t(No symbol) [0x0x7ff7bf268963]\n\t(No symbol) [0x0x7ff7bf2316b1]\n\t(No symbol) [0x0x7ff7bf232443]\n\tGetHandleVerifier [0x0x7ff7bf704eed+3061101]\n\tGetHandleVerifier [0x0x7ff7bf6ff33d+3037629]\n\tGetHandleVerifier [0x0x7ff7bf71e592+3165202]\n\tGetHandleVerifier [0x0x7ff7bf44730e+186766]\n\tGetHandleVerifier [0x0x7ff7bf44eb3f+217535]\n\tGetHandleVerifier [0x0x7ff7bf4359b4+114740]\n\tGetHandleVerifier [0x0x7ff7bf435b69+115177]\n\tGetHandleVerifier [0x0x7ff7bf41c368+10728]\n\tBaseThreadInitThunk [0x0x7ffc565e7374+20]\n\tRtlUserThreadStart [0x0x7ffc569bcc91+33]", "trace": "self = <testCases.test_Orange_HRM_Login_Params_001.Test_User_Profile_Class object at 0x00000205156B9A70>\nget_data_for_login = ('wronguser', 'wrongpass', 'Fail')\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"orangehrm login\")\n    @allure.story(\"story: orangehrm Login\")\n    @allure.description(\"This test case is to validate orangehrmLogin functionality\")\n    @allure.issue(\"issue : https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\n    @allure.link(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\n    @allure.testcase(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\n    @allure.epic(\"Epic : OrangeHRM\")\n    @allure.sub_suite(\"OrangeHRM Login\")\n    @allure.title(\"test_Orange_HRM_Login_001\")\n    @pytest.mark.sanity\n    @pytest.mark.web\n    @pytest.mark.flaky(reruns=1, reruns_delay=1)\n    def test_Orange_HRM_Login_params_002(self, get_data_for_login):\n        self.log.info(\"Testcase test_CredKart_Login_002 is started\")\n        self.log.info(f\"Opening browser and landing on login page--{self.login_url}\")\n>       self.driver.get(self.login_url)\n\ntestCases\\test_Orange_HRM_Login_Params_001.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:472: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002051577D7F0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_INTERNET_DISCONNECTED\\\\...ff7bf41c368+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffc565e7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffc569bcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\nE         (Session info: chrome=137.0.7151.104)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7bf42cda5+78885]\nE       \tGetHandleVerifier [0x0x7ff7bf42ce00+78976]\nE       \t(No symbol) [0x0x7ff7bf1e9bca]\nE       \t(No symbol) [0x0x7ff7bf1e65e2]\nE       \t(No symbol) [0x0x7ff7bf1d7319]\nE       \t(No symbol) [0x0x7ff7bf1d90c1]\nE       \t(No symbol) [0x0x7ff7bf1d7636]\nE       \t(No symbol) [0x0x7ff7bf1d7096]\nE       \t(No symbol) [0x0x7ff7bf1d6d5a]\nE       \t(No symbol) [0x0x7ff7bf1d492f]\nE       \t(No symbol) [0x0x7ff7bf1d51ac]\nE       \t(No symbol) [0x0x7ff7bf1edb7a]\nE       \t(No symbol) [0x0x7ff7bf29201e]\nE       \t(No symbol) [0x0x7ff7bf268b8a]\nE       \t(No symbol) [0x0x7ff7bf29122f]\nE       \t(No symbol) [0x0x7ff7bf268963]\nE       \t(No symbol) [0x0x7ff7bf2316b1]\nE       \t(No symbol) [0x0x7ff7bf232443]\nE       \tGetHandleVerifier [0x0x7ff7bf704eed+3061101]\nE       \tGetHandleVerifier [0x0x7ff7bf6ff33d+3037629]\nE       \tGetHandleVerifier [0x0x7ff7bf71e592+3165202]\nE       \tGetHandleVerifier [0x0x7ff7bf44730e+186766]\nE       \tGetHandleVerifier [0x0x7ff7bf44eb3f+217535]\nE       \tGetHandleVerifier [0x0x7ff7bf4359b4+114740]\nE       \tGetHandleVerifier [0x0x7ff7bf435b69+115177]\nE       \tGetHandleVerifier [0x0x7ff7bf41c368+10728]\nE       \tBaseThreadInitThunk [0x0x7ffc565e7374+20]\nE       \tRtlUserThreadStart [0x0x7ffc569bcc91+33]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "description": "This test case is to validate orangehrmLogin functionality", "attachments": [{"name": "log", "source": "1ef0c528-e5fb-43a7-81eb-093e050fe6e4-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "get_data_for_login", "value": "('wronguser', 'wrongpass', 'Fail')"}], "start": 1750269462752, "stop": 1750269462946, "uuid": "63521cc3-fbb0-4a6c-b2a0-dc3a8510b496", "historyId": "2ecbb98c70e5eb0e107fd7f940a4a6a4", "testCaseId": "bf331b416c3b8f12278fb56545f58917", "fullName": "testCases.test_Orange_HRM_Login_Params_001.Test_User_Profile_Class#test_Orange_HRM_Login_params_002", "labels": [{"name": "epic", "value": "Epic : OrangeHRM"}, {"name": "severity", "value": "critical"}, {"name": "feature", "value": "orangehrm login"}, {"name": "story", "value": "story: orangehrm Login"}, {"name": "subSuite", "value": "OrangeHRM Login"}, {"name": "tag", "value": "web"}, {"name": "tag", "value": "sanity"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_Orange_HRM_Login_Params_001"}, {"name": "host", "value": "Electricion"}, {"name": "thread", "value": "18012-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_Orange_HRM_Login_Params_001"}], "links": [{"type": "tms", "url": "https://opensource-demo.orangehrmlive.com/web/index.php/auth/login", "name": "https://opensource-demo.orangehrmlive.com/web/index.php/auth/login"}, {"type": "link", "url": "https://opensource-demo.orangehrmlive.com/web/index.php/auth/login", "name": "https://opensource-demo.orangehrmlive.com/web/index.php/auth/login"}, {"type": "issue", "url": "issue : https://opensource-demo.orangehrmlive.com/web/index.php/auth/login", "name": "issue : https://opensource-demo.orangehrmlive.com/web/index.php/auth/login"}]}